cout << "String here" << endl; //prints to console
cout << "String here"; //no newLine
cout << String here\n"; //newLine

//to Make Variables
int a = 6;

cout << a; // prints out the variable 
cout << a << " hello" << " world" << endl;

cin >> a;  //takes in input and sets the input = to a;

================RANDOM NUMBERS - 27================================
Random number generator
#include <cstdlib> //import used for the random generator
rand(); //returns a random number; (not so random though)
srand(10); //creates a different algorithm for rand();

#include <ctime> //import for the system time functions
time(0); //returns time since 1970 or whatever

srand(time(0));
cout << rand() << endl; //this will truly print random	
						//numbers everytime it is ran.
						
============DEFAULT ARGUMENTS================================================
int volume(int l = 1, int h = 1, int w = 1); //prototype for method

int main()
{
	cout << volume(); //no paramaters given so uses default values
}

int volume(int l, int h, int w){ //do NOT reinitialize default arguments!
	return l * w * h;
}
==============Unary Scope Resolution Operator=================
::variable 	// will print the global variable not the local
			//if they have the 
			//same name
//change variable type names
typedef int bob; //changing the name 'int'
bob x = 10; //same as int x = 10;
typedef string hello;
hello world = "helloWorld"; ///same as string world = "hello world";

unsigned int; //an always positive int
-------------------------ENUMERATORS-----------------------------------------------
	//values = to +1 the last value so here SUPER_HARD = 4
	//enums are unsigned ints. (ints that are always positive)
	//EASY has value of 0
 enum difficulty {EASY, HARD = 3, SUPER_HARD};
 //create a variable Difficult of type difficulty 
 //can only be = to one of the defined types.
 
    difficulty Difficult = SUPER_HARD;

    cout << Difficult << endl; //prints 4
	cout << EASY << endl; 	   //prints 0
/------------------------READING INPUT------------------------------------------------------
cin << text; // this will not read any whitespace and will stop reading once a whitespace is reached
//so if a user typed h ello, text would only be set to "h";
getline(cin,<variable>); //this readds in the entire line unline just regular cin << <variable>

----------------------------Conditional Statements-----------------------
y = (x > 50) ? 10 : 5;  //If x > 50 then y is set to 10 else y is set to 5

----------------------------Strings---------------------------------------
3 ways to create a string
string word1 = "Hello World!";
string word2("Hello World!");
string word3(3,'!'); //3 '!' characters

word1[0]; //use [] to get characters of the string	 NOTE: using word1[50] would NOT generate an error but using word1.at(50) would generate an error thus words1.at(50) is safer!
word1.at(0); //does the same thing ^ but generates an error if out of index
word1.size(); //returns string length
word1.length(); //does the same thing
word1.find("World"); //returns index of where World begins
string::npos // returns an int. this int is returned if the find function doesnt find the phrase
words1.find("World, 5"); //begins searching starting at index 5
words1.erase(1,5); //remove character starting at index 1 for length 5
words1.erase(5); //remove all letters after index 5
words1.empty(); //boolean telling whether the string has letters or not, same as if using if(word1.length() == 0)
word1.substr(0,3); //returns a substring starting at index 0 with length of 3....So it includes chars from index 0 to and including index 2...0,1,2
words1.push_back('c'); //appends the char 'c' to the end of word1
word1.append("string"); //adds "string" to the end of word1
word1.insert(0,"Hello "); //inserts the substring "Hello " starting at index 0
word1.replace(0,5,"subString"); //replaces text in a string starting at index 0 and deleting 5 characters (including 0) and inserting the substring
word1.clear(); //remove everything sets size to 0
word1.resize(20);  //resizes the string to have 20 characters, if it increases the size the new characters are null('\0'), if a decrease in size then characters are erased.
remove_if(word1.begin(), word1.end(), isspace); //removes chars if the bool is true


if("bob" > "Bob") //returns true because the b char number > B char number
if("bob" > "Bobbie") //returns true because ^ length doesnt matter in this case
if("bob" > "bobbie") //returns false because b == b and bobbie is longer

----------------------C-Style Strings----------------------------------------------------
//C-strings are an array of characters with a \0 character at the end (a null character)
//the last char in a cStyle string is a newline '\0'	
NOTE: when passing a char var[] into a method it is AUTOMATICALLY passed as a pointer* so the real object is changed!!!
char word1[] = "Hello"; //cStyle string basically a string but an array of chars. Limited amount of space
char myMessage[20] = "Hi there"; //automagically puts \0 at the end
char word2[] = "abc" //note the size is 4 NOT 3

#include <cstring> //needed for string manipulations otherwise you don't need to include it

strcpy(string1, "bilbo"); //copies "bilbo" into the string string1
word2 = "hello"; //will NOT work. you must use the above method to change the value of the cstring

strcmp(string1,"bilbo"); //compares the two strings 
//returns -1 - string1 < "bilbo, 0 - equal, 1- string1 > "bilbo"
	
strcpy(aCString, stringVariable.c_str()); //how to copy a normal string into a c-string

string word2 = " World";
string phrase = word1 + word2; //a c string and a string can combine into a string but
								//not into another cStyle string
/------------------------------Chars---------------------------------------
isalpha('a'); //returns true if the char is between a-z, A-Z
isdigit(5); 	//returns true if the char is a digits
isspace(' ');  //returns true if the char is a space
/-----------------------------arrays-------------------------------------------
string items[10]; //declares the array with 10 spots
string items2[] = {"sword","shield","bat"};
string items3[10] = {"sword","shield","bat"};
/-----------------------Multi-Dimensional Arrays-------------------------
char board[3][3] = {{'O','X','O'}, //one way to create a 2d array
					{'O','X','O'},
					{'O','X','O'}}; 
/-----------------------------Vectors (ArrayList)------------------------------
#include <vector> //must include to use vectors
vector<string> inventory; //declares a vector named inventory to hold strings
//reserving slots will just create blank strings in this case. 0's for a vector<int>
vector<string> inventory(10); //declares the vector with 10 available slots
vector<string> inventory(10, "defaultValue");//delcares vector with 10 slots all with given default value
vector<string> inventory(inventory2); //sets a new vector with the same contents as the inventory2 vector
vector.at(0) = "Hatchet"; //sets inventory[0] = "hatchet";
inventoy.push_back("sword"); //same thing as .add("sword");
inventory.size(); //returns size of the vector
inventory[0] = "battleAxe"; //sets the first value to battleaxe
inventory[0].size(); //gives the size of the string in the vector "battleAxe" = 9
inventory.pop_back(); //removes the last element from the vector
inventory.back(); //returns last element
inventory.clear(); //removes everything	
inventory.empty(); //returns boolean
iventory.insert(inventory.begin(), "crossbow"); //inserts crossbow at the beginning
inventory.erase(inventory.begin() + 2); //removes element at inventory[2] and shifts everything down
inventory.capacity(); //returns the amount of memory reserved for this vector(	for performance matters)
inventory.reserve(20); //reserves 20 spots. useful for controlling when vector is resized (performance)

/--------------------------------Iterators-----------------------------------------pg 118
vector<string>::iterator myIterator; //declares an iterator. gives access to any string types in a vector
vector<string>::const_iterator iter; //declares a constant iterator
//constant iterator cannot change the values of the vector but it can read them

iter = inventory.begin(); //returns an iterator referring to the vectors first element;
iter = invetory.end(); //sets iter 1 passed the last element in the vector.
cout << *iter; //the * means it prints the thing the iterator is referencing to not the iter itself

*myIterator = "battle axe";//changes the value of the referenced vector
//note: the above iterator would print out the changed
(myIterator).size(); //returns size of the dereferenced string object.
myIterator->size(); //does the same thing as above

/---------------------------------------Algorithms---------------------------------------------
#include <algorithm> //must include to use premade algorithms
vector<int> score;
score.push_back(1);
score.push_back(2);
score.push_back(3);
score.push_back(4);

vector<int>::iterator myIterator;
myIterator = score.find(score.begin(), score.end(), 3);//uses the find algorithm to find the value 3
//the find function takes find(startSearchPosition, endSearch+1, valueToSearchFor);
//where the start and end search must be iterators
srand(time(0)); //first seed the random algorithm
random_shuffle(score.begin(), score.end());//randomizes
sort(score.begin(),score.end()); //sorts in ascending order
remove_if(str.begin(), str.end(), isspace); //removes characters in string str if its a space but doesnt erase them it puts them at the end
count(board.begin(), board.end(), 'B'); //this would check a vector called board made up of char's and will return how many 'B's are in the vector
	

-----------------------inlining functions-------------
//inlining a function makes a copy of the function everywhere its called
//this makes it where the program doesnt have to jump back and forth so
//it can speed up performance on short frequently called functions
inline int radiation(100)
{
	//generic code here
}
//don't put the "inline" keyword in the prototype
//-------------------------------------------------------
watch shiki
-----------------------Referenced Variables---------------------------pg 177
int name = 20;
int& bob = name; //bob is referencing name, they change the same value
//reference variables must always be initialized
//reference variables can be used in function to actually change the variable argument given
//and not just copy it. For example
void function(int& a)
{
 a = 20;
}

int main()
{
	int b = 5;
	function(b);
	//the variable b has been changed to 20 since function has a referenced parameter
}
-----------------------------constant reference-----------------
//constant references act like other references except you cant change the value of what its referring to
void function(const int& a)
{
	//Note: you cannot change the value of a!
	int b = a;
}
//*****Pass by value (normal way) when working with the primitive types or you want to make a copy of the argument. Or you want to alter the paramter but not alter the argument
//*****Pass by constant reference when you want to efficiently pass an argument but you dont need to alter it
//*****Pass by reference when you want to alter the arguments. **this should usually be avoided**** typically you should just return something

------------------------------Returning References-------------------------
string& function(string& a){

	return a;
}
//Do not return a local variable if you are referencing

----------------------------------POINTERS--------------------------------------------
//pointers are variables that can contain a memory address.
//They give you the ability to work directly and efficiently with computer memory

int* pAPointer; //declares a pointer
int* pScore, score; //pScore is a pointer but score is a regular int so be careful
//You should always initialize a pointer when you declare it.

int* pScore = 0; //initializing to 0 means it points to nothing
int* pScore = null; //another way to initialize

//Pointers hold memory addresses of the type they were declare. In this case the memory address of an int
int score = 500;
int* pScore = &score; //&score returns the memory address of score
//NOT TO BE CONFUSED WITH string& score!!!!!!!!!! way of passing score as a not-copy

//you can dereference a pointer (point to the thing the pointer is referring to and not the pointer itself) by using *pScore

*pScore; // this is = to 500 since it is referencing score which is equal to 500

//Unlike references, pointers can be changed to point to different objects throughout the program

string bob = "yolo";
string* pBob = &bob;

(*pBob).size(); //returns the size of bob since it references that object. Be sure to include the parenthesis
pBob->size() //just like iterators this does the same thing as above just another way to write it!

summary:
		string var2 = "hello";
		&var2;		//returns memory location of var2
		string* var = &var2; //var points to a memory location of var2
		*var //dereference var2 returning the normal string
		
		*&var2; //returns "hello" because you reference to memory location then dereference to normal
		
----------------------------Constant Pointers=======================================================
//constant pointers are only allowed to points to the object they were initialized to. They CANNOT be changed unlike regular pointers

int score = 100;
int* const pScore = &score; //this sets a constant pointer initialized to the memory address of score.
*pScore = 200; //this IS LEGAL

@@ int* const pScore; *** //This is an error because remember pointers MUST be INITIALIZED when they are DECLARED

//*NOTE: References should typically be used before Pointers because it has cleaner syntax and it's easier to READ!

================================POINTERS TO A CONSTANT==========pg 236 summary============================================================================================================================================
const int* pNumber;			//this declares a POINTER to a CONSTANT. This means the pointers CANNOT change the referenced variable!! UNLIKE pointer constants or regular pointers!!
int lives = 3;
pNumber = &lives;       //This code is DIFFERENT from ABOVE. 
@@ *pNumber = 5; //THIS is ILLEGAL

//UNLIKE constant pointers. Pointers TO a constant CAN change what object it is pointing to!

==========================Combining constant pointers AND pointers to a constant==========================
//these pointers have both qualities meaning they can only point to ONE object AND it CANNOT change the value of the object it is pointing too.

const int BONUS = 100; //NOTE: BONUS does NOT have to be a constant here!
const int* const pBONUS = &BONUS; //a constant pointer to a constant

=============================QUICK SUMMARY OF POINTERS=====================================================

int* const p = &i;				//constant pointer---- can only point to initialized object---CANNOT point to a CONSTANT
const int* p;					//pointer to a constant---- CANNOT change the value to which it points, CAN change what object its pointing to, CAN point to constant or non-constant
const int* const p = &I;		//constant pointer to a constant ---only points to initialized object, CANNOT change the value of the object, CAN point to constant or non- constant

======================POINTERS IN FUNCTIONS----------------------------------------------------------------
int main()
{
	int myScore = 100;
	int yourScore = 500;

	goodSwap(&myScore, &yourScore); //passing through the memory address of myScore and yourScore
}

void goodSwap(int* const pX, int* const pY) //takes in constant pointers which CAN change the value of the object, but CANT change its memory location once initialized
{
	int temp = *pX;     //dereferencing the pointers with *pX
	*pX = *pY;
	*pY = temp;
}

//To return a pointer

*string returnPointer(vector<string>* const pVect, int i)   //returns pointer *string, takes in a memory address to a vector<string> object and sets it to the pointer
{
	return &((*pVec)[i]); //*pVec dereferences to the object itself so (*pVec)[i] is a string within the vector. Then the & converts the string into a memory address.
}

//POINTERS AND REGULAR ARRAYS

//An array name acts as a pointer to the array itself.
int highScores[3] = {20,15,64}; //Here the variable name "highScores" acts as a pointer for the rest of the array

//since highScores is a pointer..

*highScores //dereferences to the first object in highScores so highScores[0] = 20
*(highScores + 1) //dereferences to the second object and so on... = 15

//In general you can write an array object as *(arrayName + i) which is = to arrayName[i]

=============================CLASSES==================================================

class Critter
{
public:
	int health;
	Critter(int healthh = 0);      //Must create the Critter constructor prototype in the header //Typically a good idea to create default arguments in the constructor
	void greeting();
};
Critter::Critter(int healthh)  //This is the Critter Constructor
{
	this->health = healthh;
}	

void Critter::greeting()
{
	cout << "Hello I am a critter and I have " << health << " health!" << endl;
}

int main()
{
	Critter albert(10);
	Critter tom(20);

	albert.greeting();
	tom.greeting();

	int x;
	cin >> x;
}

//-----------------------------------------------------------------------------
//You can inline class member functions by defining the function in the header //if you do that then you dont need to define it outside of the class


---------------------------Constant member functions--------------------------

int getHealth() const; //declares getHealth() to be a constant function
//this means that getHealth() CANNOT change the value of any NON-STATIC variable in its class
//It ALSO means getHealth() CANNOT call any NON-CONSTANT functions in the class

-------------------------------STATIC MEMBERS AND FUNCTIONS------------------------------------------
static int s_critters; //declares a static int in the header of a class
//public static members of a class can be accessed anywhere using:
 Critter::s_critters;
 //you can also access them through an object of the class
 Critter critter1;
 critter1.s_critters;
 
 static int getValue();	//example of a static function in header
 NOTE: DO NOT PUT STATIC KEYWORD WHEN DEFINING THE FUNCTIONS------------------------------------------
 int getValue(){}; //define it like any other method!!!!!!!!!!!!!!!!!
 
 to initialize a private static member:
	class Animal{
		private:
			static int x;
	}
	int Animal::x = 0; 	//Remember to type int
	NOTE:
		const static members may be declared within the header like so:
			const static int x = 0;
	

\/\/\/\/\/\\/\/\/\/\*_*_*_*_*_*_*_*_*_*_*_*_GENERAL NOTES_*_*_*_*_*_*_*_*_*_*_*_*_*_*_/\\/\/\/\/\/\/\/\/\/\/
fabs(double, double) //fabs compares two floating points numbers	
do NOT compare floating point numbers with ==  instead use if(fabs(x-4.32) < 0.0001); //this compares the difference of two floating points to the given accuracy

-------------------------<cstring> library---------------------------
NOTE: must #include<cstring>
NOTE: do NOT copy a string to a string of only a few chars like if char[5] var; and you copy "remember" to it. THATS AN ERROR
strcpy(destStr, sourceStr);  //copies the string
//Must append a null character below
strcpy(destStr, sourceStr, numChars);//copies up to numChars, so deletes and replaces the first numChars characters
strcat(destStr, sourceStr); //adds sourceStr to the end of destStr
strCat(destStr, sourceStr, numChars); //adds the first numChars characters to the end of destStr
strchr(sourceStr, searchChar) // returns null if searchChar doesn't exist in sourceStr else returns address NOT INDEX of first occurence

//also note for strlen() that it returns the amount of real chars in the array ex: char var[50] = "Hi"; would return 2
strlen(sourceStr); //returns the length of the str..make sure the string checked has a null char. doesnt include null char in length
strcmp(str1, str2); //returns 0 if str1 and str2 are equals else returns non-zero
isalpha(str[0]); //returns true if the char is a letters
isdigit(str[0]); //returns true if the char is a number
isalnum(str[0]); //returns true if its eiter a number or a letter
isspace(str[0]); //returns true if its a whitespace
islower(c); //returns true if c is lowercase. Punctuation marks return false
isupper(c); //returns true if c is uppercase
isblank(c); //returns true if c is a whitespace
ispunct(c); //returns true if c is a punctuation mark !@#$%^&*()etc
isprint(c); //returns true if c is a printable character
iscntrl(c); //returns true if c is not a printable character

toupper(str[0]); //returns the uppercase version of str[0] even if its already uppercase
tolower(str[0]); //you can guess what this does
---------------------------------------------------------------------------------------------------
another way to init variables with constructors
class ClassExample{
	public:
		ClassExample();
	private:
	int x;
	int y;
}
ClassExample::ClassExample : x(20), y(50){ 		//this inits x = 20 and y = 50
	
}
//OR
ClassExample::ClassExample(int x, int y)
{
	this->x = x;
	this->y = y;					//'this' is a pointer so you must use -> NOT a '.'
}
----------------------------overloading operators-------------------------------------
add two objects together to create a new object like so:
	Animal a(10); 	//10 is the age of the animal
	Animal b(5);
	Animal c;		
	
if Animal has a method:
	Animal Animal::operator+(Animal a){
		Animal anim;
		anim = a.getAge() + age;
		return anim;
	}
continuing from main:
	//the + now automatically calls the operator+ method
	c = a + b;	//this will set Animal c age equal to 15 therefore succesfuly adding two objects together
NOTE: Another way to do this is to simply create a method and then use: c = a.add(b);

Overloading input(>>) / output(<<) streams 
NOTE: do NOT define these functions inside the class!
NOTE: it knows to automatically call this function even though its not in the class

the function input:
	istream& operator>>(istream& s, ClassName& cn){
		s >> cn.x >> cn.y;
		return s;
	}
the call:
	ClassName cl;
	cin >> cl;	//this will call the above operator and set values for x & y
-------------------------------------------------------------------------------------------
linkedList---------
--linkedList are like vectors but they are not sorted in memory which allows for quick and easy
insertions and deletions, but slower to find values using .at(index);

CLARIFICATION CLARIFICATION CLARIFICATION CLARIFICATION CLARIFICATION CLARIFICATION

int* myPtr; 	//THIS CREATES A POINTER VARIABLE. IT POINTS TO A MEMORY ADDRESS OF ANOTHER VARIABLE
*myPtr;			/THIS DEREFERENCES THE POINTER. SO IT RETURNS THE REAL VALUE NOT THE ADDRESSS
&myVar;	//RETURNS THE MEMORY ADDRESS OF myVar
function(int& var);		//PASS BY REFERENCE, CHANGES THE ACTUAL VALUE

-----------------------------------------
new 		//operator that allocates location in memory
a->printNums();		//same as (*a).printNums();
delete	//deletes memory 

ex:
	Fruit* orange = 0; 			//create a pointer "orange" that points to an object of type Fruit, init to 0
	orange = new Fruit;		//allocates appropriate amount of memory
	orange->removeSeeds();	//calls the function same as, (*orange).removeSeeds();
	delete orange;				//removes the allocated memory orange takes up
	
	
-----------A few <cstring> functions-------------
//Note: sourceStr is a char*  , not sure if a normal String literal would work?
strchr(sourceStr, charToFind); 	//returns 0 if char not found, else returns a pointer to the FIRST occurence
strrchr(sourceStr, charToFind);	//same as above but returns pointer to the LAST occurence 
strstr(str1, str2);				//returns a char* to the first occurence of str2 in str1, if not found returns 0




