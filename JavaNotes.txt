---------------Interfaces---------------
comparable <ClassToCompare> //if you don't type <classToCompare> the compareTo method will only accept an Object
{
public int compareTo(ClassToCompare o)
{
	return x.compareTo(o.getb());   //returns negative int if x is less than o.getb()
}
//for some reason calling x.compareTo() is not using recursion but using some other method that returns -int,0,+int
//compareTo() only takes objects so for wrapper classes must be used or casted 
}
comparable <class> 
{
// Can be pass to a sort method such as Collections.sort or Arrays.sort
// used to compare objects that do not have natural ordering

int compare(Object o1, Object o2) 	//instead of Object type the class Name if you used <class> when implementing
{
	return o1.getInt() - o2.getInt();   //comparator doesn't use the compareTo() method so use if statements or the method used in the example to return -int, 0, or +int		
}
}

--------------More on interfaces--------------------------
Interfaces can be references just like a class can this is why they are so useful in polymorphism
interface Pettable{...}

Pettable cat1 = new Cat(); //if Cat implements Pettable it can be used with a Pettable reference allowing it to be used with any
							//methods or arrays that take Pettable objects
------------Abstract Classes--------------
//Absract classes are used for classes that should not be instantiated
//it contains abstract method which must be implemented for its subclasses but
//	cannot find a good reason to implement it in the super class

public abstract class Animal
{
	//animal is a good example to make an abstract class because
	//animal is very generic and you dont make Animal objects
	//because an Animal is not an object but a dog is!
	abstract void makeNoise();
	
	//makeNoise is abstract because you dont know what sound an animal makes!
	public static void main(String[] args) //abstract classes CAN contain normal methods too!
	{
		Animal a = new Dog();  //we use this because we want the object to reference an animal but act like a dog!
		//for example if we had a method that took an animal as an argument we could then use the object a
		Animal[] b = new Animal[5];
		b[0] = new Dog();  //This works fine because a dog IS an animal
		
		Dog c = new Dog(); //This is the same but Animal c = new Dog(); makes it a little more clear that dog extends animal!?
	}
}

//NOTE:** Animal aDog = new Dog();
//		  Dog d = aDog; //THIS will NOT COMPILE because aDog is of reference type animal and d is referencing Dog
// An Animal CANNOT be converted into a Dog, but a Dog can be converted into an Animal

public class Dog extends Animal
{
	public void makeNoise()  //implements the abstract method from Animal class
	{
		System.out.println("Woof!"); //we know what sound a Dog makes!
	}
}
---------------------------More abstract examples-------------------PG 213
public abstract Class Animal
{
	abstract void speak(); 		//Must have an abstract method for Animal references to work with subclasses
	public static void main(String[] args)
	{
		Animal dog1 = new Dog();	//speak() MUST be in the Animal class because a references Animal!
		dog1.speak();				//this method would not work if speak() was not in Animal class
								//because dog1 is referencing Animal, but is an instance of Dog!
	}
}
class Dog extends Animal
{
	public void speak()
	{
		System.out.println("Woof!");
	}
	//if you know dog1 is a Dog object but referencing an Animal you can cast it back down
	Animal dog1 = new Dog();
	Dog dog2 = (Dog)dog1;  	//this will work!
	Dog dog2 = dog1; 		//will NOT work Animal cannot be dereferenced to a Dog!
	
	Dog dog1 = new Dog();
	Animal dog2 = dog1; 	//this will work fine!
}	
--------------------------Object Class--------------------------
//every class extends object
//object has various methods that can be used
public class Animal
{
	public static void main(String[] args)
	{
		Cat c = new Cat();
		Dog d = new Dog();
		//---------------------
		if(d.equals(c)) //returns false .equals() is a method in the object class that compares two classes
		c.getClass(); //returns the name of the class of the object
		c.hashCode(); //returns the hashcode for the object
		c.toString(); //returns the memory location of the object. Usually overridden
			
	}
}
--------------------------------------------FORMATTING-------------------------------------------
String s = String.format("%, d",100000000); //this will format 1000000000 to have commas like 1,000,000,000
String.format("%.2f",100.12345); //returns 100.12
String.format("%,.2f",100000.12345); //returns 100,000.12
String.format("%x", 42); //returns 42 in hexadecimal
%c //char
-----------DATES---------------
java.util.Date; //good for getting the current date and time
java.util.Calendar; //good for other dates
Calendar cal = Calendar.getInstance(); //calendar class is abstract
---calendar methods---
add(int field, int amount); //c.add(c.DATE, 35);	adds 35 days to the date
get(int field); //returns value of the given calendar field
getInstance();	//returns a calendar you can specify a locale
getTimeInMillis(); //returns time in millis as a long
c.roll(c.DATE, 35);	//adds 35 days to the date but doesn't change the month
c.set(c.DATE, 1);		//sets the day to 1
-----------------------------------------SOUND-------------------------




\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/--JAVA SWING--\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*


public void paintComponent(Graphics g)  //must import java.awt.*; for graphics
{
	super.paintComponent(g);			//do this for some reason
	g.drawString("message",x,y);  
}


-------------------------------Listeners---------------------------------------
ActionListener(); //an interface for listening to buttons and other actions performed on jcomponents
public void actionPerformed(ActionEvent e) //method must be implemented if implementing ActionListener
{
	e.getActionCommand(); //returns a string that has to do with the command action of the source
	e.getSource(); //returns
	e.getWhen(); //returns timestamp of when this event occured
	e.paraString(); //returns a string giving you ACTION_PERFORMED, command string, when: time pressed, modifiers: ctrl + Button1
	e.getModifiers(); //returns a string giving the keys pressed when the button was pressed ex: ctrl + Button1, means ctrl left click was used to click the button
}


-----------------------------LAYOUT MANAGERS-----------------------------------
//NOTE:
instead of adding a panel to the JFrame you can also set the contentPane of the jframe to a panel
frame.setContentPane(panel);
BorderLayout();			//NOTE: BorderLayout is in java.awt.BorderLayout !!!!!!!!
panel.add(BorderLayout.SOUTH, button); //SOUTH, NORTH, CENTER, ETC
panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)); //set a boxlayout where components stack on top of eachother
panel.setLayout(new FlowLayout()); //default layout for JPanel
panel.setLayout(new GridLayout());
panel.setLayout(null); //turns off all layoutmangers and now you have to hard code the location of components using setBounds(x,y,width,height);


-------------------------------COMPONENTS/WIDGETS-------------------------------------
JTextField field = new JTextField(20); //20 means 20 columns not 20 pixels. The width of the textField
field.setText("text");
field.addActionListener(new ActionListener...); //if you want to know everytime the user types in a key
field.selectAll(); //highlight all the text
field.requestFocus(); //puts the cursor back in the field so the user can continue typing without clicking on it
field.setFont();

JTextArea text = new JTextArea(10,20); //takes width and height in columns as paramters NOT PIXELS
text.setLineWrap(true); //makes the text wrap when the user gets to the end
text.setText("text here");
text.append("addon text"); //adds text to the end of the text thats already there
text.selectAll(); //selects all the text
text.requestFocus();

JScrollPane scroller = new JScrollPane(text); //JScrollPanes are just a pane that takes other components and gives them a scroll bar
scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); //tells the scroller to always have a scrollbar appeared also try AS_NEEDED
panel.add(scroller); //always make sure you add the SCROLLER and NOT the component that you put into the scroller!!!!

JCheckBox check = new JCheckBox("Goes to 11"); //create a check box with the text "Goes to 11" next to it
check.addItemListener(new ItemListener(){
	public void itemStateChanged(ItemEvent ev){
		if(check.isSelected())
			System.out.println("is selected!");
	}
});
check.isSelected(); //returns true or false
check.setSelected(true); 

JList list = new JList(arrayName); //takes in an array of any objectType as the parameter
//NOTE: must add this to a JScrollPane
	list.addListSelectionListener(new ListSelectionListener(){			//NOTE!: YOU MUST import javax.swing.event.*; in order to use ListSelectionListener!!!!!!!!!!!!!
		public void valueChanged(ListSelectionEvent lse)
		{
			if(!lse.getValueIsAdjusting()){			//!lse.getValueIsAdjusting() if you don't use this then the event is fired twice, once on down click and once on click release!
				System.out.println((String)list.getSelectedValue() + "\n");
			}
		}
	});
list.setVisibleRowCount(4); //set how many rows of the list are shown at a time
list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //set how the things are selected
--------------------EVENTS-------------------------------
class extends MouseAdapter  //same as implementing mouse listener but you don't need to implement the metods
------------------Random--------------------------------
Random rand = new Random();
rand.nextInt(50) + 1; //returns int with max including 50 and min 1
setSeed(int seed); 

\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/CODING EXAMPLES\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/
\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/
--------------------Serializing objects example----------------
import java.io.*;
public class Hexa //implements Comparator <Hexa>
{
	public static void main(String[] args)
	{
		Scanner scan = new Scanner(System.in);
		Hero h1 = new Hero(100);
		int x = 0;
		while(true)
		{
			System.out.println("0: getStrength, 1: decStr, 2: save Hero, 3: read Hero");
			x = scan.nextInt();
			if(x == 0)
			{
				System.out.println("Strength = " + h1.getStrength());
			}
			if(x == 1){
				h1.setStrength(-10);
			}
			else if(x == 2){
				try{
					ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("Hero.ser"));
					os.writeObject(h1);
				}catch(Exception e){
					e.printStackTrace();
				}
			}
			else if(x == 3)
			{
				try{
					FileInputStream fileStream = new FileInputStream("Hero.ser");
					ObjectInputStream is = new ObjectInputStream(fileStream);
					h1 = (Hero)is.readObject();
				}catch(Exception e){
					e.printStackTrace();
				}
			}
		}
	}
}

class Hero implements Serializable
{
	private int strength;
	
	Hero(int strength)
	{
		this.strength = strength;
	}
	
	public void setStrength(int str){
		strength += str;
	}
	public int getStrength()
	{
		return strength;
	}
}
\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/
-------------Throwing exceptions example-----------------

public class Hexa
{
	public static void main(String[] args)
	{
		try{
			riskyMethod(-1);
		}catch(BadException e)
		{
			e.printStackTrace();
		}
	}
	
	public static void riskyMethod(int x) throws BadException
	{
		if(x < 0)
			throw new BadException();
		else
			System.out.println("Method ran");
	}
}
class BadException extends Exception
{
	public void printStackTrace()
	{
		System.out.println("BadException stackTrace");
	}
}
\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/

-------------------Example of using an Object oriented Handler------------------So you don't have to use giant if-else chains in listeners
//in a panel class......

	private class ButtonHandler implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			System.out.println(((Button)e.getSource()).getText() + " button was pressed");	//must cast to the class in order to use its methods or else it will reference the Object class!
		}
	}
	
} //end of Panel class

class Button extends JButton
{
	String text;
	Button(String text)
	{
		super(text);
		this.text = text;
	}
	public String getText()
	{
		return text;
	}
	public String toString()
	{
		return text;
	}
}
\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/
-----------------------------------DATES-------------------------DATES-----------------------DATES----------------------------DATES
import java.util.*;
public class Dates
{
	public static void main(String[] args)
	{
		Calendar c = Calendar.getInstance();
		c.set(2004,0,7,15,40);  //year, month, day, hour, minute ---month is 0 based, hours:min is military time
		
		System.out.println("initial date: " + c.getTime());
		
		long day1 = c.getTimeInMillis();  //gets the time in milliseconds since 1970 jan 1
		day1 += 1000 * 60 * 60;   	//add 1 hour converted to milliseconds to day1
		
		c.setTimeInMillis(day1);	//c now equals the initial date + 1 hour
		
		System.out.println("added 1 hour: " + c.getTime());
		
		System.out.println("new hour: " + c.get(c.HOUR_OF_DAY));
		
		c.add(c.DATE, 35);		//adds 35 days to the date
		
		System.out.println("add 35 days: " + c.getTime());
		
		c.roll(c.DATE, 35);		//roll moves up 35 days but does NOT change the month
		
		System.out.println("roll 35 days: " + c.getTime());
		
		c.set(c.DATE, 1);		//sets the day to 1
		
		System.out.println("set day to 1: " + c.getTime());
	}
}
\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\*/\
--------------------Serializable objects--------------------------Serializable objects------------------------------
To serialize an object: make sure to implement Serializable
	
	1. Make a FileOutputStream:	
			FileOutputStream fileStream = new FileOutputStream("sample.ser"); //FileOutputStreams know how to write to files
	
	2. Chain an ObjectOutputStream to the FileOutputStream:
			ObjectOutputStream os = new ObjectOutputStream(fileStream);
			
	3. Write the object to the file:
			os.writeObject(objectExample);
			
	4. Close the ObjectOutputStream:
			os.close();
			
To read a serialized object:

	1. Make a FileInputStream:
			FileInputStream fileStream = new FileInputStream(sample.ser);
	
	2. Make an ObjectInputStream:
			ObjectInputStream is = new ObjectInputStream(fileStream);
		
	3. Read the objects:
			Animal restoreAnim1 = (Animal)is.readObject();		//Animal is just an example in this case
			
	4. Close the ObjectInputStream:
			is.close();											//important for some reason
			
			
Note: 	To mark an object variable to NOT be serialized use the 'transient' keyword, ex: transient String name = "Bilbo";
		Serialized Objects must be casted when read back in
		Static-variables are NOT serialized
		Streams are either connection streams or chain streams:
			connection streams can connect to an outside source such as a file, network socket, or console.
			FileOutputStream, FileInputStream's are examples of Connection Streams
			
			chain streams cannot connect to a source or destination and must be chained to a connection(or other) stream.
			ObjectInputStream, ObjectOutputStream's are an example of chain streams
			

-----------------File class--------------------File class----------------File class---------------------------
File f = new File("Example.txt");				//represents a file, File objects don't read or write
File f = new File("C://Home/");					//file pointing to a directory
f.mkdir();										//creates a directory

if(f.isDirectory()){							//if f points to a directory
	String[] dirContents = f.list();			//f.list() returns fileNames within it's directory
}

f.getAbsolutePath();							//returns the path of the file

f.delete();										//deletes the file and returns true if succesful

----Other File methods----
f.canExecute()	//returns true if executable
file.canRead()	//if readable
canWrite();		//if writable
compareTo(File pathname);	//compare lexicographically?
createNewFile();			//creates a new empty file, returns a boolean
deleteOnExit();				//deletes the File when the JVM terminates
getCanonicalPath();			//
getName();
getParent();				//returns pathname of parent or null if no parent exist
getParentFile();			//returns a File object of the parent File
isFile();					//boolean
isDirectory();				//boolean
isHidden();					//boolean
//see API for full list 
--------------Ports and internets and sockets----------------------------------Ports and internets and sockets------------------------------------------------------------------
import java.net.*;
NOTE:	use IP 127.0.0.1 for "local host" aka your own machine for testing


---Read data from a socket
Socket nameSocket = new Socket("127.0.0.1", 5000); //creates a socket for connecting to the IP given in port 5000

InputStreamReader stream = new InputStreamReader(nameSocket.getInputStream());	//ask the socket for an inputstream to chain to our inputstreamreader
//InputStreamReader is a bridge between a byte stream and a normal char stream

BufferedReader reader = new BufferedReader(stream);	//chain the input stream to a buffered read which turns it into readable things
String message = reader.readLine();

how it works:
				Server -> bytes 	  -> chars             -> buffered Chars -> Client
				Data   -> InputStream -> InputStreamReader -> BufferedReader -> Strings
				

---write data to a socket

Socket chatSocket = new Socket("127.0.0.1", 5000);	//connect to the server

PrintWriter pw = new PrintWriter(chatSocket.getOutputStream()); //pass the sockets OUTPUT stream to the printwriter
pw.println("message to send");






